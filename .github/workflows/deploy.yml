name: Build & Deploy

on:
  push:
    branches:
      - main
  pull_request:
    types: 
      - opened
      - synchronize
      - reopened
    branches:
      - "*"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  build:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      id-token: write
      issues: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GEOLONIA_BOT_PAT_TOKEN }}

      - run: npm ci

      - run: git config --global core.quotepath false

      - run: sudo apt-get install -y nkf tippecanoe

      - run: bash ./src/validate-dir-name.sh ../data

      - run: npm run build-config-json

      - run: npm run build-csv
        continue-on-error: true
        id: build-step

      - name: Comment to PR if build fails
        id: comment-build-error
        if: steps.build-step.outcome == 'failure'
        run: ./src/errorFiles.sh
        env:
          GH_TOKEN: ${{ github.token }}
          OWNER: "${{ github.repository_owner }}"
          REPO: "${{ github.event.repository.name }}"
          BRANCH: "${{ github.event.pull_request.head.ref }}"

      - name: Install GDAL (for ogr2ogr)
        run: |
          sudo apt-get update
          sudo apt-get install -y gdal-bin
      - name: 差分を取得
        id: changed-dirs
        run: |
          # pull_request の場合は origin/main との差分
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            git fetch origin main
            git diff --name-only --diff-filter=ACMR origin/main | grep "^data/" > changed_files.txt || true
      
          # push の場合はひとつ前のコミットとの差分
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            PREVIOUS_COMMIT=$(git rev-parse HEAD^)
            CURRENT_COMMIT=$(git rev-parse HEAD)
            git diff --name-only --diff-filter=ACMR $PREVIOUS_COMMIT $CURRENT_COMMIT | grep "^data/" > changed_files.txt || true
          fi
      
          xargs -n1 dirname < changed_files.txt | sort -u > changed_dirs.txt || true
      - name: GeoJSON に変換
        run: |
          while read -r dir; do
            [[ -z "$dir" ]] && continue
            node ./src/build-location-data.js "$dir"
            ./src/shape2Geojson.sh "$dir"
          done < changed_dirs.txt

      - name: GeoJSONの属性を変換
        run: |
          while read -r dir; do
            [[ -z "$dir" ]] && continue
            ./src/convertAttributes.sh "$dir"
          done < changed_dirs.txt

      - run: npm run build-standard-data
      - run: npm run build-api

      - name: Update README
        if: github.event_name == 'pull_request'
        run: |
          git config --global user.name "geolonia-bot"
          git config --global user.email "geolonia-bot@users.noreply.github.com"

          git checkout $GITHUB_HEAD_REF

          npm run build-readme
          git fetch --no-tags --prune origin main

          if ! git diff --quiet origin/main -- README.md; then
            git add README.md
            git commit -m "Update README By GitHub Actions"
            git push origin HEAD
          else
            echo "README is up to date vs origin/main."
          fi

      # ベクトルタイル生成（xyz形式）
      - name: Generate Vector Tiles
        run: |
          while read -r dir; do
            [[ -z "$dir" ]] && continue
            DIR_NAME=$(basename "$dir")
            mkdir -p "./build/tiles/$DIR_NAME"
            tippecanoe -e "./build/tiles/$DIR_NAME/" "./build/$DIR_NAME/data.geojson" -l "$DIR_NAME" -Z 9 -z 14 -r1 --no-feature-limit --no-tile-size-limit --force
          done < changed_dirs.txt

      # tiles.json を生成
      - name: Generate tile.json
        run: bash ./src/build-tilejson.sh

      # AWS Credentials設定
      - name: Configure AWS Credentials
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::302263045312:role/yaizu-smartcity-jp-github-actions-deploy-v1
          aws-region: ap-northeast-1
          role-duration-seconds: 3600

      - name: Upload updated vector tiles to S3 (overwrite only)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          while read -r dir; do
            [[ -z "$dir" ]] && continue
            DIR_NAME=$(basename "$dir")
            TARGET_DIR=./build/tiles/$DIR_NAME
            S3_DIR=s3://yaizu-smartcity-jp-frontend-v1/tiles/$DIR_NAME

            echo "🔼 Uploading .pbf files to $S3_DIR"
            aws s3 sync "$TARGET_DIR" "$S3_DIR" \
              --exclude "*" --include "*.pbf" \
              --exact-timestamps \
              --content-type "application/vnd.mapbox-vector-tile" \
              --content-encoding "gzip"

            echo "🔼 Uploading .json files to $S3_DIR"
            aws s3 sync "$TARGET_DIR" "$S3_DIR" \
              --exclude "*" --include "*.json" \
              --exact-timestamps \
              --content-type "application/json"

          done < changed_dirs.txt

      - name: Delete outdated files from S3
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          while read -r dir; do
            [[ -z "$dir" ]] && continue
            DIR_NAME=$(basename "$dir")
            TARGET_DIR=./build/tiles/$DIR_NAME
            S3_DIR=s3://yaizu-smartcity-jp-frontend-v1/tiles/$DIR_NAME
            
            echo "🧹 Deleting obsolete files in $S3_DIR"
            aws s3 sync "$TARGET_DIR" "$S3_DIR" \
              --delete \
              --exact-timestamps

          done < changed_dirs.txt

      # 既存のフロントエンドコンテンツもデプロイ
      - name: Deploy Frontend Contents to S3
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          aws s3 sync ./build s3://yaizu-smartcity-jp-frontend-v1 \
            --exact-timestamps
          aws cloudfront create-invalidation --distribution-id "ENI2MYYW0W5YR" --paths "/*"
